import os
import time
import subprocess
import win32print
import win32api

SUPPORTED_EXTENSIONS = {'.pdf', '.jpg', '.jpeg', '.png', '.bmp'}

import os
import time
import subprocess
import win32print
import win32api
import wmi
from datetime import datetime

from services.notify_admins import notify_admins_about_print_error
from services.printer_config import get_saved_printer_name

SUPPORTED_EXTENSIONS = {'.pdf', '.jpg', '.jpeg', '.png', '.bmp'}

import pythoncom  # –î–æ–±–∞–≤—å —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
import os, time, subprocess, win32print, win32api, wmi
from datetime import datetime
from services.notify_admins import notify_admins_about_print_error
from services.printer_config import get_saved_printer_name

SUPPORTED_EXTENSIONS = {'.pdf', '.jpg', '.jpeg', '.png', '.bmp'}

def print_and_wait(filepaths, copies: int = 1, timeout: int = 120, user_id=None, bot=None):
    # üëá –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø COM –î–õ–Ø –ü–û–¢–û–ö–ê
    pythoncom.CoInitialize()

    try:
        if isinstance(filepaths, str):
            filepaths = [filepaths]

        printer = get_saved_printer_name() or win32print.GetDefaultPrinter()
        seen_jobs = set()

        for _ in range(copies):
            for filepath in filepaths:
                filepath = os.path.abspath(filepath)
                ext = os.path.splitext(filepath)[1].lower()

                if ext == ".pdf":
                    win32api.ShellExecute(
                        0, "printto", filepath, f'"{printer}"',
                        os.path.dirname(filepath), 0
                    )
                elif ext in SUPPORTED_EXTENSIONS:
                    subprocess.Popen(
                        ["mspaint", "/pt", filepath, printer], shell=False
                    )
                else:
                    _notify_print_error(bot, user_id, "–ø–µ—á–∞—Ç—å", {"—Ñ–∞–π–ª": filepath}, f"–§–æ—Ä–º–∞—Ç {ext} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                    raise ValueError(f"–§–æ—Ä–º–∞—Ç {ext} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")

                time.sleep(1)

        wait_for_queue(printer, timeout, user_id=user_id, bot=bot, filepaths=filepaths)

    finally:
        # üëá –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º COM
        pythoncom.CoUninitialize()

from services.notify_admins import notify_admins_about_print_error
def wait_for_queue(printer: str, timeout: int, user_id=None, bot=None, filepaths=None):
    start = time.time()
    seen_jobs = set()
    c = wmi.WMI()

    while True:
        h = win32print.OpenPrinter(printer)
        jobs = win32print.EnumJobs(h, 0, -1, 1)
        win32print.ClosePrinter(h)

        current_ids = {job["JobId"] for job in jobs}
        seen_jobs |= current_ids

        # üü¢ –ü–µ—á–∞—Ç—å –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å
        if seen_jobs and not (seen_jobs & current_ids):
            return

        # ‚è± –ü–µ—á–∞—Ç—å –∑–∞—Ç—è–Ω—É–ª–∞—Å—å
        if time.time() - start > timeout:
            _notify_print_error(bot, user_id, "–ø–µ—á–∞—Ç—å", {"—Ñ–∞–π–ª": filepaths}, "–ü–µ—á–∞—Ç—å –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
            raise TimeoutError("–ü–µ—á–∞—Ç—å –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")

        # ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –Ω–∞ –æ—à–∏–±–∫–∏
        try:
            for printer_obj in c.Win32_Printer(Name=printer):
                error_code = printer_obj.DetectedErrorState
                if error_code not in (2, None):  # 2 ‚Äî "–û—à–∏–±–æ–∫ –Ω–µ—Ç"
                    error_text = _decode_error(error_code)
                    _notify_print_error(bot, user_id, "–ø–µ—á–∞—Ç—å", {"—Ñ–∞–π–ª": filepaths}, error_text)
                    raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏: {error_text}")
        except Exception as e:
            print("[wait_for_queue] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:", e)

        time.sleep(1)


def _decode_error(code):
    ERRORS = {
        0: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        1: "–î—Ä—É–≥–æ–µ",
        2: "–û—à–∏–±–æ–∫ –Ω–µ—Ç",
        3: "–ú–∞–ª–æ –±—É–º–∞–≥–∏",
        4: "–ù–µ—Ç –±—É–º–∞–≥–∏",
        5: "–ú–∞–ª–æ —Ç–æ–Ω–µ—Ä–∞",
        6: "–ù–µ—Ç —Ç–æ–Ω–µ—Ä–∞",
        7: "–ó–∞–ø—Ä–∞–≤–∫–∞",
        8: "–û—à–∏–±–∫–∞ –≤ –ø–µ—á–∞—Ç–∏",
        9: "–í–Ω–∏–º–∞–Ω–∏–µ",
        10: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
    }
    return ERRORS.get(code, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ ({code})")


def _notify_print_error(bot, user_id, action, details, error_message):
    if bot and user_id:
        try:
            from asyncio import run_coroutine_threadsafe
            coro = notify_admins_about_print_error(
                bot=bot,
                user_id=user_id,
                action=action,
                details=details,
                error_message=error_message
            )
            loop = bot.get_running_loop()
            run_coroutine_threadsafe(coro, loop)
        except Exception as e:
            print("[notify_admins] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", e)