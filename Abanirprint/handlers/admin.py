from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from config import ADMINS
from services.statistics import load_stats
from datetime import datetime
# utils/admin_only.py
from functools import wraps
from aiogram.types import Message, CallbackQuery
from config import ADMINS

router = Router()
admin_message_cache = {}

async def cleanup_admin_messages(user_id: int, bot, chat_id: int):
    msgs = admin_message_cache.get(user_id, {})
    for msg_id in msgs.get("user_msgs", []):
        try:
            await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except:
            pass
    for msg_id in msgs.get("bot_msgs", []):
        try:
            await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except:
            pass
    admin_message_cache[user_id] = {"user_msgs": [], "bot_msgs": []}

admin_reply_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÇ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤")],
        [KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üìü –°—Ç–∞—Ç—É—Å –∞–ø–ø–∞—Ä–∞—Ç–∞")],
        [KeyboardButton(text="üìã –û—á–µ—Ä–µ–¥—å –ø–µ—á–∞—Ç–∏")],
        [KeyboardButton(text="üñ® –í—ã–±—Ä–∞—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä")],
        [KeyboardButton(text="‚Ü©Ô∏è –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞")],
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª"
)

def admin_only(func):
    @wraps(func)
    async def wrapper(event, *args, **kwargs):
        user_id = event.from_user.id
        username = event.from_user.username or "–±–µ–∑ username"
        full_name = event.from_user.full_name

        # –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω
        if user_id not in ADMINS:
            if isinstance(event, Message):
                await event.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
                text_attempt = event.text
            elif isinstance(event, CallbackQuery):
                await event.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
                text_attempt = event.data
            else:
                text_attempt = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞"

            # —É–≤–µ–¥–æ–º–∏–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ (–∫—Ä–æ–º–µ —Ç–æ–≥–æ, –∫—Ç–æ –ø—ã—Ç–∞–ª—Å—è)
            notify_text = (
                f"üö® <b>–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞</b>\n\n"
                f"üßë‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>\n"
                f"üë§ –ò–º—è: {full_name}\n"
                f"üîó Username: @{username}\n"
                f"üóÇ –î–µ–π—Å—Ç–≤–∏–µ: <code>{text_attempt}</code>"
            )

            for admin_id in ADMINS:
                if admin_id != user_id:
                    try:
                        await event.bot.send_message(admin_id, notify_text, parse_mode="HTML")
                    except Exception as e:
                        print(f"[admin_only] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

            return  # –±–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        return await func(event, *args, **kwargs)
    return wrapper

import win32print

def get_all_jobs():
    try:
        p = win32print.OpenPrinter(win32print.GetDefaultPrinter())
        jobs = win32print.EnumJobs(p, 0, 99, 1)
        win32print.ClosePrinter(p)
        return jobs
    except Exception as e:
        print(f"[get_all_jobs] ‚ùå –û—à–∏–±–∫–∞: {e}")
        return []

def cancel_job_by_index(index: int) -> bool:
    try:
        jobs = get_all_jobs()
        if index <= 0 or index > len(jobs):
            return False
        job = jobs[index - 1]
        p = win32print.OpenPrinter(win32print.GetDefaultPrinter())
        win32print.SetJob(p, job["JobId"], 0, None, win32print.JOB_CONTROL_DELETE)
        win32print.ClosePrinter(p)
        return True
    except Exception as e:
        print(f"[cancel_job_by_index] ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def restart_job_by_index(index: int) -> bool:
    try:
        jobs = get_all_jobs()
        if index <= 0 or index > len(jobs):
            return False
        job = jobs[index - 1]
        p = win32print.OpenPrinter(win32print.GetDefaultPrinter())
        win32print.SetJob(p, job["JobId"], 0, None, win32print.JOB_CONTROL_RESTART)
        win32print.ClosePrinter(p)
        return True
    except Exception as e:
        print(f"[restart_job_by_index] ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


from aiogram.types import Message
from services.status_checker import get_printer_status, get_print_queue

@router.message(F.text == "üìã –û—á–µ—Ä–µ–¥—å –ø–µ—á–∞—Ç–∏")
@admin_only
async def show_print_queue(message: Message):
    from services.status_checker import get_print_queue
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

    queue = get_print_queue()
    if not queue:
        msg = await message.answer("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
        admin_message_cache[message.from_user.id] = {"bot_msgs": [msg.message_id]}
        return

    text = "<b>üìã –û—á–µ—Ä–µ–¥—å –ø–µ—á–∞—Ç–∏:</b>\n\n"
    kb = InlineKeyboardMarkup(inline_keyboard=[])

    for idx, job in enumerate(queue, start=1):
        text += (
            f"üìù –ó–∞–¥–∞–Ω–∏–µ #{idx}\n"
            f"‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç: <code>{job['doc']}</code>\n"
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏–ª: <code>{job['submitted_by']}</code>\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: <b>{job['status']}</b>\n\n"
        )
        kb.inline_keyboard.append([
            InlineKeyboardButton(text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å #{idx}", callback_data=f"cancel_job_{idx}"),
            InlineKeyboardButton(text=f"üîÑ –ü–æ–≤—Ç–æ—Ä #{idx}", callback_data=f"restart_job_{idx}")
        ])

    kb.inline_keyboard.append([
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="stats_main_menu")
    ])

    msg = await message.answer(text, reply_markup=kb, parse_mode="HTML")
    admin_message_cache[message.from_user.id] = {"bot_msgs": [msg.message_id]}

@router.callback_query(F.data.startswith("cancel_job_"))
@admin_only
async def cancel_print_job(callback: CallbackQuery):
    job_idx = int(callback.data.replace("cancel_job_", ""))

    success = cancel_job_by_index(job_idx)
    msg_text = f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ #{job_idx} –æ—Ç–º–µ–Ω–µ–Ω–æ." if success else f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ #{job_idx}"
    await callback.answer(msg_text, show_alert=True)

@router.callback_query(F.data.startswith("restart_job_"))
@admin_only
async def restart_print_job(callback: CallbackQuery):
    job_idx = int(callback.data.replace("restart_job_", ""))

    success = restart_job_by_index(job_idx)
    msg_text = f"üîÑ –ó–∞–¥–∞–Ω–∏–µ #{job_idx} –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ." if success else f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ #{job_idx}"
    await callback.answer(msg_text, show_alert=True)



@router.message(F.text == "üìü –°—Ç–∞—Ç—É—Å –∞–ø–ø–∞—Ä–∞—Ç–∞")
@admin_only
async def show_device_status(message: Message):
    await cleanup_admin_messages(message.from_user.id, message.bot, message.chat.id)
    await message.delete()

    try:
        status = get_printer_status()
        # ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        if status is None:
            msg = await message.answer("‚ùå –ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –≤–∫–ª—é—á—ë–Ω –∏ –∏–º—è —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
            admin_message_cache[message.from_user.id] = {"bot_msgs": [msg.message_id]}
            return

        queue = get_print_queue()
    except Exception as e:
        msg = await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞:\n<code>{e}</code>", parse_mode="HTML")
        admin_message_cache[message.from_user.id] = {"bot_msgs": [msg.message_id]}
        return

    # üëá –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    status = get_printer_status()
    if not status:
        msg = await message.answer("‚ùå –ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –≤–∫–ª—é—á—ë–Ω –∏ –∏–º—è —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
        admin_message_cache[message.from_user.id] = {"bot_msgs": [msg.message_id]}
        return

    queue = get_print_queue()
    online_status = "üü¢ <b>–û–Ω–ª–∞–π–Ω</b>" if status["online"] else "üî¥ <b>–û—Ñ—Ñ–ª–∞–π–Ω</b>"
    last_activity = datetime.now().strftime("%d.%m.%Y %H:%M")
    error_value = status.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    if error_value not in ["–û—à–∏–±–æ–∫ –Ω–µ—Ç", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"]:
        error_text = f"‚ö†Ô∏è <b>{error_value}</b>"
    else:
        error_text = "‚úÖ –û—à–∏–±–æ–∫ –Ω–µ—Ç"

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏
    queue_count = len(queue)
    queue_text = "\n".join([f"‚Ä¢ {j['doc']} ({j['submitted_by']})" for j in queue]) if queue else "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞"

    text = (
        f"üìü <b>–°—Ç–∞—Ç—É—Å –∞–ø–ø–∞—Ä–∞—Ç–∞</b>\n\n"
        f"üì° –ü—Ä–∏–Ω—Ç–µ—Ä: {status['name']}\n"
        f"üåê –°—Ç–∞—Ç—É—Å: {online_status}\n"
        f"üïì –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: <i>{last_activity}</i>\n\n"
        f"{error_text}\n\n"
        f"üì• <b>–û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞–Ω–∏–π ({queue_count}):</b>\n{queue_text}"
    )

    msg = await message.answer(text, parse_mode="HTML", reply_markup=admin_reply_keyboard)
    admin_message_cache[message.from_user.id] = {"bot_msgs": [msg.message_id]}

from keyboards import get_main_reply_keyboard  # –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@router.message(F.text == "‚Ü©Ô∏è –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞")
@admin_only
async def exit_admin_mode(message: Message):
    await cleanup_admin_messages(message.from_user.id, message.bot, message.chat.id)
    await message.delete()
    msg = await message.answer(
        "üì¶ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞.",
        reply_markup=get_main_reply_keyboard(message.from_user.id)
    )
    admin_message_cache[message.from_user.id]["bot_msgs"].append(msg.message_id)

@router.message(F.text == "üë®‚Äçüíª –ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º")
@admin_only
async def admin_mode(message: Message):
    await cleanup_admin_messages(message.from_user.id, message.bot, message.chat.id)
    await message.delete()

    if message.from_user.id not in ADMINS:
        msg = await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        admin_message_cache[message.from_user.id]["bot_msgs"] = [msg.message_id]
        return

    from services.history_logger import safe_load_history
    try:
        stats = load_stats()
        orders = safe_load_history()
    except Exception as e:
        msg = await message.answer(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n–û—à–∏–±–∫–∞: {e}")
        admin_message_cache[message.from_user.id]["bot_msgs"] = [msg.message_id]
        return

    total_orders = len(orders)
    total_revenue = sum(order.get("details", {}).get("cost", 0) for order in orders)
    last_activity = stats.get("last_activity")
    last_activity_str = datetime.fromisoformat(last_activity).strftime("%d.%m.%Y %H:%M") if last_activity else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    msg = await message.answer(
        f"üë®‚Äçüíª <b>–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º</b>\n\n"
        f"üìä <b>–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: <b>{total_orders}</b>\n"
        f"‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: <b>{total_revenue} ‚ÇΩ</b>\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: <i>{last_activity_str}</i>\n\n"
        f"üîΩ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:",
        parse_mode="HTML",
        reply_markup=admin_reply_keyboard
    )
    admin_message_cache[message.from_user.id]["bot_msgs"] = [msg.message_id]


from services.history_logger import safe_load_history

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

@router.message(F.text == "üìÇ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤")
@admin_only
async def show_history_choice(message: Message):
    await cleanup_admin_messages(message.from_user.id, message.bot, message.chat.id)
    await message.delete()

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìÑ 1 –∑–∞–∫–∞–∑", callback_data="history_1"),
            InlineKeyboardButton(text="üìÑ 3 –∑–∞–∫–∞–∑–∞", callback_data="history_3"),
            InlineKeyboardButton(text="üìÑ 6 –∑–∞–∫–∞–∑–æ–≤", callback_data="history_6"),
        ],
        [InlineKeyboardButton(text="üìÅ –í—Å–µ –∑–∞–∫–∞–∑—ã (JSON)", callback_data="history_json"),],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="stats_main_menu")
        ]
    ])

    msg = await message.answer(
        "üìÇ –°–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å?",
        reply_markup=kb
    )
    admin_message_cache[message.from_user.id] = {"bot_msgs": [msg.message_id]}



from aiogram.types import CallbackQuery

@router.callback_query(F.data == "history_json")
@admin_only
async def send_history_json(callback: CallbackQuery):
    from aiogram.types import FSInputFile
    import os

    path = "data/history.json"
    if not os.path.exists(path):
        await callback.message.answer("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return

    file = FSInputFile(path)
    await callback.message.answer_document(
        file,
        caption="üìÅ –ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ"
    )

@router.callback_query(F.data.startswith("history_"))
@admin_only
async def show_history_by_count(callback: CallbackQuery):
    await cleanup_admin_messages(callback.from_user.id, callback.bot, callback.message.chat.id)
    try:
        await callback.message.delete()
    except:
        pass

    count = int(callback.data.replace("history_", ""))
    history = safe_load_history()
    if not history:
        msg = await callback.message.answer("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", reply_markup=admin_reply_keyboard)
        admin_message_cache[callback.from_user.id] = {"bot_msgs": [msg.message_id]}
        return

    entries = reversed(history[-count:])
    text = f"<b>üìÇ –ü–æ—Å–ª–µ–¥–Ω–∏–µ {count} –∑–∞–∫–∞–∑(–æ–≤):</b>\n\n"
    for entry in entries:
        text += f"üïì <i>{entry['datetime']}</i>\n"
        text += f"üë§ ID: <code>{entry['user_id']}</code>\n"
        text += f"üìå –î–µ–π—Å—Ç–≤–∏–µ: <b>{entry['action']}</b>\n"
        for key, value in entry["details"].items():
            text += f"  ‚Ä¢ {key}: {value}\n"
        text += "\n"

    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="stats_main_menu")
    ]])

    msg = await callback.message.answer(text, parse_mode="HTML", reply_markup=kb)
    admin_message_cache[callback.from_user.id] = {"bot_msgs": [msg.message_id]}


from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

@router.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@admin_only
async def show_statistics(message: Message):
    await message.delete()
    await show_statistics_core(message.from_user.id, message.bot, message.chat.id)

    history = safe_load_history()
    if not history:
        msg = await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö", reply_markup=admin_reply_keyboard)
        admin_message_cache[message.from_user.id]["bot_msgs"] = [msg.message_id]
        return

    # üß† –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    stats = {
        "print": 0,
        "scan": 0,
        "scan_and_print": 0,
    }
    total_pages_printed = 0
    total_pages_scanned = 0
    total_revenue = 0

    for entry in history:
        action = entry.get("action")
        stats[action] = stats.get(action, 0) + 1

        details = entry.get("details", {})
        total_revenue += details.get("cost", 0)

        if action in ["print"]:
            total_pages_printed += details.get("pages", 0) * details.get("copies", 1)
        if action in ["scan", "scan_and_print"]:
            total_pages_scanned += details.get("pages", 0)

    text = (
        f"<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥:</b>\n\n"
        f"<b>üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤:</b>\n"
        f"‚Ä¢ –ü–µ—á–∞—Ç—å: <b>{stats.get('print', 0)}</b>\n"
        f"‚Ä¢ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: <b>{stats.get('scan', 0)}</b>\n"
        f"‚Ä¢ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ + –ø–µ—á–∞—Ç—å: <b>{stats.get('scan_and_print', 0)}</b>\n\n"
        f"<b>üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:</b> <u>{total_revenue} ‚ÇΩ</u>\n\n"
        f"<b>üìÉ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü:</b>\n"
        f"‚Ä¢ –ù–∞–ø–µ—á–∞—Ç–∞–Ω–æ: <b>{total_pages_printed}</b>\n"
        f"‚Ä¢ –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: <b>{total_pages_scanned}</b>"
    )

    # ‚è± –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–∏–æ–¥–∞
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìÖ –î–µ–Ω—å", callback_data="stats_day"),
            InlineKeyboardButton(text="üìÜ –ù–µ–¥–µ–ª—è", callback_data="stats_week"),
            InlineKeyboardButton(text="üóì –ú–µ—Å—è—Ü", callback_data="stats_month"),
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="stats_main_menu")
        ]
    ])

    admin_message_cache[message.from_user.id]["bot_msgs"] = [msg.message_id]

@router.callback_query(F.data == "stats_back")
@admin_only
async def back_to_stats_periods(callback):
    await callback.message.delete()
    await show_statistics_core(callback.from_user.id, callback.bot, callback.message.chat.id)

from datetime import datetime, timedelta

def filter_history_by_period(period: str) -> list:
    history = safe_load_history()
    now = datetime.now()

    def in_range(dt: datetime) -> bool:
        if period == "day":
            return dt.date() == now.date()
        elif period == "week":
            return dt >= now - timedelta(days=7)
        elif period == "month":
            return dt >= now - timedelta(days=30)
        elif period == "all":
            return True
        return False

    filtered = []
    for entry in history:
        try:
            dt = datetime.strptime(entry["datetime"], "%Y-%m-%d %H:%M:%S")
            if in_range(dt):
                filtered.append(entry)
        except:
            continue

    return filtered

@router.callback_query(F.data == "stats_main_menu")
@admin_only
async def stats_main_menu(callback):
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"[stats_main_menu] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    msg = await callback.message.answer(
        "üîß –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é:",
        reply_markup=admin_reply_keyboard
    )
    admin_message_cache[callback.from_user.id] = {"bot_msgs": [msg.message_id]}

async def show_statistics_core(user_id: int, bot, chat_id: int):
    await cleanup_admin_messages(user_id, bot, chat_id)

    history = safe_load_history()
    if not history:
        msg = await bot.send_message(chat_id, "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö", reply_markup=admin_reply_keyboard)
        admin_message_cache[user_id] = {"bot_msgs": [msg.message_id]}
        return

    stats = {"print": 0, "scan": 0, "scan_and_print": 0}
    total_pages_printed = 0
    total_pages_scanned = 0
    total_revenue = 0

    for entry in history:
        action = entry.get("action")
        stats[action] = stats.get(action, 0) + 1
        details = entry.get("details", {})
        total_revenue += details.get("cost", 0)
        if action == "print":
            total_pages_printed += details.get("pages", 0) * details.get("copies", 1)
        elif action in ("scan", "scan_and_print"):
            total_pages_scanned += details.get("pages", 0)

    text = (
        f"<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥:</b>\n\n"
        f"<b>üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤:</b>\n"
        f"‚Ä¢ –ü–µ—á–∞—Ç—å: <b>{stats.get('print', 0)}</b>\n"
        f"‚Ä¢ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: <b>{stats.get('scan', 0)}</b>\n"
        f"‚Ä¢ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ + –ø–µ—á–∞—Ç—å: <b>{stats.get('scan_and_print', 0)}</b>\n\n"
        f"<b>üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:</b> <u>{total_revenue} ‚ÇΩ</u>\n\n"
        f"<b>üìÉ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü:</b>\n"
        f"‚Ä¢ –ù–∞–ø–µ—á–∞—Ç–∞–Ω–æ: <b>{total_pages_printed}</b>\n"
        f"‚Ä¢ –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: <b>{total_pages_scanned}</b>"
    )

    # üé® –ü–æ—Å—Ç—Ä–æ–∏–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
    import matplotlib.pyplot as plt

    labels = ["–ü–µ—á–∞—Ç—å", "–°–∫–∞–Ω", "–°–∫–∞–Ω + –ü–µ—á–∞—Ç—å"]
    values = [
        stats.get("print", 0),
        stats.get("scan", 0),
        stats.get("scan_and_print", 0)
    ]
    colors = ["#A0C4FF", "#B9FBC0", "#FFD6A5"]

    if sum(values) > 0:
        fig, ax = plt.subplots()
        ax.pie(values, labels=labels, colors=colors, autopct="%1.1f%%", startangle=90)
        ax.axis("equal")
        plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è")
        plt.tight_layout()
        plt.savefig("stats_pie_all.png")
        plt.close()

        from aiogram.types import FSInputFile
        image = FSInputFile("stats_pie_all.png")

        msg = await bot.send_photo(
            chat_id,
            photo=image,
            caption=text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìÖ –î–µ–Ω—å", callback_data="stats_day"),
                    InlineKeyboardButton(text="üìÜ –ù–µ–¥–µ–ª—è", callback_data="stats_week"),
                    InlineKeyboardButton(text="üóì –ú–µ—Å—è—Ü", callback_data="stats_month"),
                ],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="stats_main_menu")]
            ])
        )
    else:
        # –µ—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        msg = await bot.send_message(chat_id, text, reply_markup=admin_reply_keyboard, parse_mode="HTML")

    admin_message_cache[user_id] = {"bot_msgs": [msg.message_id]}

@router.callback_query(F.data.startswith("stats_"))
@admin_only
async def show_stats_for_period(callback, state=None):
    await cleanup_admin_messages(callback.from_user.id, callback.bot, callback.message.chat.id)
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"[show_stats_for_period] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    period_key = callback.data.replace("stats_", "")
    period_titles = {
        "day": "—Å–µ–≥–æ–¥–Ω—è",
        "week": "–Ω–µ–¥–µ–ª—é",
        "month": "–º–µ—Å—è—Ü",
        "all": "–≤—Å—ë –≤—Ä–µ–º—è"
    }
    title = period_titles.get(period_key, "–ø–µ—Ä–∏–æ–¥")

    history = filter_history_by_period(period_key)

    if not history:
        msg = await callback.message.answer(f"üì≠ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –∑–∞ {title}", reply_markup=admin_reply_keyboard)
        admin_message_cache[callback.from_user.id] = {"bot_msgs": [msg.message_id]}
        return

    from collections import Counter

    stats = Counter(entry.get("action") for entry in history)
    total_revenue = sum(entry.get("details", {}).get("cost", 0) for entry in history)
    printed_pages = sum(entry.get("details", {}).get("pages", 0) * entry.get("details", {}).get("copies", 1)
                        for entry in history if entry["action"] == "print")
    scanned_pages = sum(entry.get("details", {}).get("pages", 0)
                        for entry in history if entry["action"] in ("scan", "scan_and_print"))
    unique_users = len(set(entry["user_id"] for entry in history))

    text = (
        f"<b>üìä –ó–∞–∫–∞–∑—ã –∑–∞ {title}:</b>\n\n"
        f"üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{unique_users}</b>\n"
        f"üßæ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: <b>{len(history)}</b>\n"
        f"‚Ä¢ –ü–µ—á–∞—Ç—å: <b>{stats.get('print', 0)}</b>\n"
        f"‚Ä¢ –°–∫–∞–Ω: <b>{stats.get('scan', 0)}</b>\n"
        f"‚Ä¢ –°–∫–∞–Ω + –ø–µ—á–∞—Ç—å: <b>{stats.get('scan_and_print', 0)}</b>\n\n"
        f"üìÉ –°—Ç—Ä–∞–Ω–∏—Ü:\n"
        f"‚Ä¢ –ù–∞–ø–µ—á–∞—Ç–∞–Ω–æ: <b>{printed_pages}</b>\n"
        f"‚Ä¢ –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: <b>{scanned_pages}</b>\n\n"
        f"üí∞ –í—ã—Ä—É—á–∫–∞: <b>{total_revenue} ‚ÇΩ</b>"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –ø–µ—Ä–∏–æ–¥–∞–º", callback_data="stats_back")
    ]])

    from services.graph_generator import generate_stats_chart  # –µ—Å–ª–∏ –≤—ã–Ω–µ—Å–µ—à—å –∫–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
    from aiogram.types import FSInputFile

    # –µ—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ ‚Äî –Ω–µ "all", —Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫


    if period_key in ("day", "week", "month"):
        chart_path = f"chart_{period_key}.png"
        generate_stats_chart(period_key, output_path=chart_path)
        image = FSInputFile(chart_path)

        msg = await callback.message.answer_photo(
            photo=image,
            caption=text,
            parse_mode="HTML",
            reply_markup=kb
        )
    else:
        msg = await callback.message.answer(
            text,
            reply_markup=kb,
            parse_mode="HTML"
        )

    admin_message_cache[callback.from_user.id] = {"bot_msgs": [msg.message_id]}

from aiogram.types import FSInputFile

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import wmi
from services.printer_config import save_printer_name

@router.message(F.text == "üñ® –í—ã–±—Ä–∞—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä")
@admin_only
async def choose_printer(message: Message):
    c = wmi.WMI()
    printers = [p.Name for p in c.Win32_Printer()]
    if not printers:
        msg = await message.answer("‚ùå –ü—Ä–∏–Ω—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        admin_message_cache[message.from_user.id] = {"bot_msgs": [msg.message_id]}
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=name, callback_data=f"set_printer:{name}")]
            for name in printers
        ] + [[InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="stats_main_menu")]]
    )

    msg = await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–Ω—Ç–µ—Ä:", reply_markup=kb)
    admin_message_cache[message.from_user.id] = {"bot_msgs": [msg.message_id]}

@router.callback_query(F.data.startswith("set_printer:"))
@admin_only
async def set_selected_printer(callback: CallbackQuery):
    printer_name = callback.data.replace("set_printer:", "")
    save_printer_name(printer_name)

    await callback.message.delete()
    msg = await callback.message.answer(
        f"‚úÖ –ü—Ä–∏–Ω—Ç–µ—Ä <b>{printer_name}</b> –≤—ã–±—Ä–∞–Ω.",
        parse_mode="HTML",
        reply_markup=admin_reply_keyboard
    )
    admin_message_cache[callback.from_user.id] = {"bot_msgs": [msg.message_id]}

from functools import wraps
from aiogram.types import Message, CallbackQuery
from config import ADMINS

