# handlers/scan.py

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from services.yookassa_pay import create_payment, check_payment
from services.scan_utils import scan_document, merge_scans_to_pdf, print_file
import asyncio
import os
from aiogram.types import FSInputFile

router = Router()
user_scan_data = {}

class ScanStates(StatesGroup):
    choosing_output = State()
    choosing_pages = State()
    choosing_mode = State()
    waiting_payment = State()
    scanning_manual = State()
    scanning_auto = State()


@router.message(F.text == "üìÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def start_scan(message: Message, state: FSMContext):
    from handlers.user_main import _remove_last_menu  # üëà –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ (–µ—Å–ª–∏ –æ–Ω–∞ –≤ print.py)
    from handlers.user_main import _remove_last_menu, welcome_message_id

    # üßπ –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    try:
        msg_id = welcome_message_id.get(message.from_user.id)
        if msg_id:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
    except:
        pass

    await _remove_last_menu(message)
    await _remove_last_menu(message)  # üëà –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤
    # –ú–∞—Å–∫–∏—Ä—É–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.edit_text("‚Äé")
    except:
        try:
            await message.delete()
        except:
            pass

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–Ω—è—Ç–Ω–æ", callback_data="scan_confirmed")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    image = FSInputFile(r"C:\Program Files\JetBrains\AbanirPrint\images\ScanInstruction.png")

    text = (
        "<b>üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é:</b>\n\n"
        "1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –∫—Ä—ã—à–∫—É —Å–∫–∞–Ω–µ—Ä–∞\n"
        "2Ô∏è‚É£ –ü–æ–ª–æ–∂–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç <u>–ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π –≤–Ω–∏–∑</u>\n"
        "3Ô∏è‚É£ –ó–∞–∫—Ä–æ–π—Ç–µ –∫—Ä—ã—à–∫—É\n\n"
        "‚¨áÔ∏è –î–∞–ª–µ–µ –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å–æ —Å–∫–∞–Ω–æ–º"
    )

    await message.answer_photo(photo=image, caption=text, reply_markup=kb, parse_mode="HTML")
    await state.clear()


@router.callback_query(F.data == "scan_confirmed")
async def scan_output_choice(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()  # üëà –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    except:
        pass
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram", callback_data="scan_send")],
        [InlineKeyboardButton(text="üñ® –ù–∞–ø–µ—á–∞—Ç–∞—Ç—å", callback_data="scan_print")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    text = (
        "<b>üìé –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>\n\n"
        "‚Ä¢ <b>üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å</b> ‚Äî –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç PDF-—Ñ–∞–π–ª –≤ Telegram\n"
        "‚Ä¢ <b>üñ® –ù–∞–ø–µ—á–∞—Ç–∞—Ç—å</b> ‚Äî —Ñ–∞–π–ª —Å—Ä–∞–∑—É –ø–æ–π–¥—ë—Ç –Ω–∞ –ø–µ—á–∞—Ç—å"
    )

    try:
        image = FSInputFile(r"C:\Program Files\JetBrains\AbanirPrint\images\ScanOption.png")
        await callback.message.answer_photo(image, caption=text, reply_markup=kb, parse_mode="HTML")
    except Exception as e:
        print("[scan_output_choice] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", e)
        await callback.message.answer(text, reply_markup=kb, parse_mode="HTML")

    await state.set_state(ScanStates.choosing_output)

@router.callback_query(F.data.in_(["scan_send", "scan_print"]))
async def scan_choose_pages(callback: CallbackQuery, state: FSMContext):
    target = "telegram" if callback.data == "scan_send" else "print"
    await state.update_data(output=target)

    # üß† –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å" / "üñ® –ù–∞–ø–µ—á–∞—Ç–∞—Ç—å"
    await state.update_data(scan_action_message_id=callback.message.message_id)

    msg = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (1‚Äì20):")
    await state.update_data(pages_prompt_id=msg.message_id)
    await state.set_state(ScanStates.choosing_pages)


@router.message(ScanStates.choosing_pages)
async def scan_pages_input(message: Message, state: FSMContext):
    try:
        await message.delete()
    except Exception as e:
        print("[scan_pages_input] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", e)

    data = await state.get_data()

    # üßπ –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å" / "üñ® –ù–∞–ø–µ—á–∞—Ç–∞—Ç—å"
    action_id = data.get("scan_action_message_id")
    if action_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=action_id)
        except Exception as e:
            print("[scan_pages_input] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—è:", e)

    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü..."
    prompt_id = data.get("pages_prompt_id")
    if prompt_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=prompt_id)
        except Exception as e:
            print("[scan_pages_input] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü:", e)

    if not message.text.isdigit() or not (1 <= int(message.text) <= 20):
        msg = await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20.")
        await state.update_data(pages_prompt_id=msg.message_id)
        return

    pages = int(message.text)
    await state.update_data(pages=pages)

    photo = FSInputFile(r"C:\Program Files\JetBrains\AbanirPrint\images\ScanMode.png")  # –ø—É—Ç—å –∫ —Ç–≤–æ–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üñê –í—Ä—É—á–Ω—É—é", callback_data="scan_manual")],
        [InlineKeyboardButton(text="‚è± –ê–≤—Ç–æ (–∫–∞–∂–¥—ã–µ 5 —Å–µ–∫)", callback_data="scan_auto")]
    ])

    caption = (
        "üì∑ <b>–†–µ–∂–∏–º—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
        "üñê <b>–í—Ä—É—á–Ω—É—é</b> ‚Äî –≤—ã –Ω–∞–∂–∏–º–∞–µ—Ç–µ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Å–∫–∞–Ω–æ–º.\n"
        "‚è± <b>–ê–≤—Ç–æ</b> ‚Äî —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:"
    )

    msg = await message.answer_photo(photo=photo, caption=caption, reply_markup=kb, parse_mode="HTML")
    await state.update_data(scan_mode_message_id=msg.message_id)  # üíæ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    await state.set_state(ScanStates.choosing_mode)
    await state.set_state(ScanStates.choosing_mode)

@router.callback_query(F.data.in_(["scan_manual", "scan_auto"]))
async def scan_prepare_payment(callback: CallbackQuery, state: FSMContext):
    # –ü–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫ –æ–ø–ª–∞—Ç—ã
    mode = "manual" if callback.data == "scan_manual" else "auto"
    data = await state.get_data()

    # üßπ –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞
    scan_mode_msg_id = data.get("scan_mode_message_id")
    if scan_mode_msg_id:
        try:
            await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=scan_mode_msg_id)
        except Exception as e:
            print("[scan_prepare_payment] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞:", e)
    pages = data["pages"]
    output = data["output"]

    price_per_page = 10 if output == "telegram" else 15
    cost = pages * price_per_page  # —Ü–µ–Ω–∞ –∑–∞ 1 —Å–∫–∞–Ω
    payment = create_payment(cost, callback.from_user.id)
    await state.update_data(
        mode=mode,
        payment_id=payment["id"],
        cost=cost  # üëà –î–û–ë–ê–í–¨ –≠–¢–û
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –°–ë–ü", url=payment["url"])],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="scan_check_payment")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    await callback.message.answer(
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} ‚ÇΩ ({pages} —Å—Ç—Ä. √ó {price_per_page}‚ÇΩ)\n\nüîó –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ –°–ë–ü",
        reply_markup=kb
    )
    await state.set_state(ScanStates.waiting_payment)

@router.callback_query(F.data == "scan_check_payment")
async def scan_check_payment(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if check_payment(data["payment_id"]) != "succeeded":
        await callback.answer("‚è≥ –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", show_alert=True)
        return

    await callback.message.delete()
    pages = data["pages"]
    mode = data["mode"]
    output = data["output"]
    user_id = callback.from_user.id

    folder = f"scans/{user_id}"
    os.makedirs(folder, exist_ok=True)

    if mode == "manual":
        await state.set_state(ScanStates.scanning_manual)
        progress_msg = await callback.message.answer(
            f"üì∑ –ì–æ—Ç–æ–≤–æ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é\n\n"
            f"üóÇ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {pages}\n"
            f"‚úÖ –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: 0\n"
            f"‚åõ –û—Å—Ç–∞–ª–æ—Å—å: {pages}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì∑ –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="scan_once")]
            ])
        )
        await state.update_data(current_page=0, folder=folder, scan_prompt_id=progress_msg.message_id)
    else:
        await state.set_state(ScanStates.scanning_auto)

        progress_msg = await callback.message.answer(
            f"üì∑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞–≤—Ç–æ-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é\n\n"
            f"üóÇ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {pages}\n"
            f"‚úÖ –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: 0\n"
            f"‚åõ –û—Å—Ç–∞–ª–æ—Å—å: {pages}\n\n"
            f"<code>{get_progress_bar(0)}</code>\n\n"
            f"<i>–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ª–∏—Å—Ç—ã –∏ –ø–æ–ª–æ–∂–∏—Ç–µ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–∫–∞–Ω–µ—Ä.\n"
            f"–°–∫–∞–Ω –Ω–∞—á–Ω—ë—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.\n"
            f"–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É –≤–∞—Å –±—É–¥–µ—Ç 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–º–µ–Ω—É.</i>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∞–≤—Ç–æ-—Å–∫–∞–Ω", callback_data="start_auto_scan")
            ]]),
            parse_mode="HTML"
        )

        await state.update_data(current_page=0, folder=folder, scan_prompt_id=progress_msg.message_id)

@router.callback_query(F.data == "start_auto_scan")
async def scan_auto_start(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    pages = data["pages"]
    folder = data["folder"]
    scan_prompt_id = data["scan_prompt_id"]

    loop = asyncio.get_running_loop()

    for i in range(pages):
        progress = 0
        # –°–∫–∞–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É
        scan_task = loop.run_in_executor(None, scan_document, os.path.join(folder, f"scan_{i+1}.jpg"))

        # 1. –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ 80% (–ø—Ä–∏–º–µ—Ä–Ω–æ –∑–∞ 15 —Å–µ–∫—É–Ω–¥)
        for step in range(1, 9):
            progress = step / 10
            text = (
                f"<b>üì° –ê–≤—Ç–æ-—Å–∫–∞–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã {i + 1}</b>\n\n"
                f"üóÇ –í—Å–µ–≥–æ: {pages}\n"
                f"‚úÖ –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {i}\n"
                f"‚åõ –û—Å—Ç–∞–ª–æ—Å—å: {pages - i}\n\n"
                f"<code>{get_progress_bar(progress)}</code>\n\n"
                f"<i>–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ {8 - step + 1} —Å–µ–∫</i>"
            )
            try:
                await callback.bot.edit_message_text(
                    chat_id=callback.message.chat.id,
                    message_id=scan_prompt_id,
                    text=text,
                    parse_mode="HTML"
                )
            except:
                pass
            await asyncio.sleep(1.9)

        # 2. –î–æ–∂–¥–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        await scan_task

        # 3. 100% –∏ —Å—Ç–∞—Ç—É—Å
        text = (
            f"<b>‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i + 1} –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞</b>\n\n"
            f"üóÇ –í—Å–µ–≥–æ: {pages}\n"
            f"‚úÖ –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {i + 1}\n"
            f"‚åõ –û—Å—Ç–∞–ª–æ—Å—å: {pages - (i + 1)}\n\n"
            f"<code>{get_progress_bar(1.0)}</code>\n\n"
            f"<i>–ó–∞–º–µ–Ω–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É. –°–∫–∞–Ω –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥</i>"
        )
        try:
            await callback.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=scan_prompt_id,
                text=text,
                parse_mode="HTML"
            )
        except:
            pass

        await state.update_data(current_page=i + 1)
        if i + 1 < pages:
            for countdown in range(5, 0, -1):
                countdown_text = (
                    f"<b>‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i + 1} –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞</b>\n\n"
                    f"üóÇ –í—Å–µ–≥–æ: {pages}\n"
                    f"‚úÖ –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {i + 1}\n"
                    f"‚åõ –û—Å—Ç–∞–ª–æ—Å—å: {pages - (i + 1)}\n\n"
                    f"<code>{get_progress_bar(1.0)}</code>\n\n"
                    f"<i>–ó–∞–º–µ–Ω–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É. –°–∫–∞–Ω –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ {countdown} —Å–µ–∫—É–Ω–¥</i>"
                )
                try:
                    await callback.bot.edit_message_text(
                        chat_id=callback.message.chat.id,
                        message_id=scan_prompt_id,
                        text=countdown_text,
                        parse_mode="HTML"
                    )
                except:
                    pass
                await asyncio.sleep(1)  # –º–∞–ª—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º

    # –í—Å—ë –≥–æ—Ç–æ–≤–æ ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º
    await finish_scanning(callback.message, state)

from aiogram.utils.chat_action import ChatActionSender
from aiogram.types import CallbackQuery

@router.callback_query(F.data == "scan_once")
async def manual_scan_once(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    page = data.get("current_page", 0)
    total = data["pages"]
    folder = data["folder"]
    scan_prompt_id = data.get("scan_prompt_id")

    path = os.path.join(folder, f"scan_{page + 1}.jpg")
    await callback.answer("üì∑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å...")

    # –≠–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    # 1. –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–∞–∑—É
    loop = asyncio.get_running_loop()
    scan_task = loop.run_in_executor(None, scan_document, path)

    # 2. –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ 80%
    for i in range(1, 9):  # 8 —à–∞–≥–æ–≤ (–¥–æ 80%)
        progress_bar = get_progress_bar(i / 9)
        text = (
            f"<b>üì° –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page + 1}...</b>\n\n"
            f"üóÇ –í—Å–µ–≥–æ: {total}\n"
            f"‚úÖ –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {page}\n\n"
            f"‚åõ –û—Å—Ç–∞–ª–æ—Å—å: {total - page}\n\n"
            f"<code>{progress_bar}</code>"
        )
        try:
            await callback.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=scan_prompt_id,
                text=text,
                reply_markup=None,
                parse_mode="HTML"
            )
        except:
            pass
        await asyncio.sleep(1.9)  # ~15 —Å–µ–∫

    # 3. –¥–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    await scan_task

    page += 1
    await state.update_data(current_page=page)

    # –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å (100%)
    progress_bar = get_progress_bar(1.0)
    final_text = (
        f"<b>‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
        f"üóÇ –í—Å–µ–≥–æ: {total}\n"
        f"‚úÖ –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {page}\n"
        f"‚åõ –û—Å—Ç–∞–ª–æ—Å—å: {total - page}\n\n"
        f"<code>{progress_bar}</code>\n\n"
        f"<i>–°–∫–∞–Ω–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.</i>"
    )

    try:
        await callback.bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=scan_prompt_id,
            text=final_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì∑ –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="scan_once")]
            ]),
            parse_mode="HTML"
        )
    except Exception as e:
        print("[manual_scan_once] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", e)

    if page >= total:
        await finish_scanning(callback.message, state)

async def auto_scan(callback: CallbackQuery, state: FSMContext, folder: str):
    data = await state.get_data()
    total = data["pages"]
    loop = asyncio.get_running_loop()

    for i in range(total):
        path = os.path.join(folder, f"scan_{i+1}.jpg")

        # ‚öôÔ∏è –í —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ:
        await loop.run_in_executor(None, scan_document, path)

        await callback.message.answer(f"üì∏ –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1}")
        await asyncio.sleep(5)

    await finish_scanning(callback.message, state)

from keyboards import get_main_reply_keyboard
from handlers.user_main import return_to_main

from handlers.user_main import welcome_message_id

async def show_main_menu(message):
    try:
        # –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        old = welcome_message_id.get(message.from_user.id)
        if isinstance(old, dict) and old.get("menu_msg_id"):
            await message.bot.delete_message(chat_id=message.chat.id, message_id=old["menu_msg_id"])
        elif isinstance(old, int):
            await message.bot.delete_message(chat_id=message.chat.id, message_id=old)
    except:
        pass

    # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é
    # msg = await message.answer(text = " f", reply_markup=main_reply_keyboard)
    welcome_message_id[message.from_user.id] = {"menu_msg_id": msg.message_id}

async def finish_scanning(message: Message, state: FSMContext):
    print("[finish_scanning] –í—ã–∑–≤–∞–Ω")
    data = await state.get_data()
    user_id = message.chat.id
    folder = data["folder"]
    output = data["output"]
    paths = [os.path.join(folder, f"scan_{i+1}.jpg") for i in range(data["pages"])]
    pdf_path = os.path.join(folder, "result.pdf")
    merge_scans_to_pdf(paths, pdf_path)

    # üßπ –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    prompt_id = data.get("scan_prompt_id")
    if prompt_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=prompt_id)
        except:
            pass

    if output == "telegram":
        await message.answer_document(
            FSInputFile(pdf_path),
            caption="üìé –í–∞—à –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç",
            reply_markup=get_main_reply_keyboard(user_id)
        )
    else:
        # 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–µ—á–∞—Ç—å..."
        printing_msg = await message.answer("üñ® –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–µ—á–∞—Ç—å...")

        # 2. –ü–µ—á–∞—Ç–∞–µ–º –≤ —Ñ–æ–Ω–µ
        loop = asyncio.get_running_loop()
        await loop.run_in_executor(None, print_file, pdf_path)

        try:
            await printing_msg.delete()
        except:
            pass

        # 3. –ß–µ—Ä–µ–∑ –ø–∞—É–∑—É ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            "‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–µ—á–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –ó–∞–±–µ—Ä–∏—Ç–µ –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç.",
            reply_markup=get_main_reply_keyboard(user_id)
        )

        await asyncio.sleep(1)

    from services.history_logger import safe_save_action

    print(f"[finish_scanning] –°–æ—Ö—Ä–∞–Ω—è–µ–º: output={output}")
    safe_save_action(
        user_id=user_id,
        action="scan" if output == "telegram" else "scan_and_print",
        details={
            "pages": data["pages"],
            "mode": data["mode"],
            "output": output,
            "cost": data.get("cost", 0),
            "error": None
        }
    )

    await state.clear()


def get_progress_bar(progress: float, total: int = 10) -> str:
    filled = round(progress * total)
    empty = total - filled
    return "‚ñ∞" * filled + "‚ñ±" * empty