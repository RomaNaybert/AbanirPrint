from aiogram import Router, F
from aiogram.types import Message
from aiogram.enums.parse_mode import ParseMode
import asyncio
from aiogram.filters import CommandStart
from keyboards import get_main_reply_keyboard, copy_selector, back_to_menu_button, confirm_keyboard
from config import UPLOAD_DIR, MAX_PHOTOS, MAX_PDF_MB, ALLOWED_IMAGE_TYPES
from services.price_calc import calculate_price
from services.print_manager import print_and_wait
import os
from PyPDF2 import PdfReader
from aiogram.types import CallbackQuery
from aiogram.types import FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from keyboards import get_main_reply_keyboard

class PrintStates(StatesGroup):
    await_copies = State()

router = Router()
welcome_message_id = {}  # –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è id —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
user_print_queue = {}

@router.callback_query(F.data == "back_to_menu")
async def return_to_main(callback: CallbackQuery):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é (–µ—Å–ª–∏ –µ—Å—Ç—å)
    data = welcome_message_id.get(callback.from_user.id)
    if data:
        try:
            if isinstance(data, dict):
                if data.get("menu_msg_id"):
                    await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=data["menu_msg_id"])
                if data.get("user_msg_id"):
                    await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=data["user_msg_id"])
                if data.get("user_file_msg_id"):
                    await callback.bot.delete_message(chat_id=callback.message.chat.id,
                                                      message_id=data["user_file_msg_id"])
            elif isinstance(data, int):
                await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=data)
        except Exception as e:
            print("[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:", e)

    # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ callback-—Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except:
        pass

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    data = welcome_message_id.get(callback.from_user.id)

    if data and isinstance(data, dict):
        for mid in data.get("photo_message_ids", []):
            try:
                await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=mid)
            except Exception as e:
                print("[back_to_menu] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ:", e)

    if data and isinstance(data, dict):
        file_msg_id = data.get("user_file_msg_id")
        if file_msg_id:
            try:
                await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=file_msg_id)
            except Exception as e:
                print("[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º:", e)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
    msg = await callback.message.answer(
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_reply_keyboard(callback.from_user.id)
    )
    welcome_message_id[callback.from_user.id] = {
        "menu_msg_id": msg.message_id
    }

    await callback.answer()

@router.message(CommandStart())
async def cmd_start(message: Message):
    photo = FSInputFile("C:\\Program Files\\JetBrains\\AbanirPrint\\images\\WelcomeImage.png")

    msg1 = await message.answer_photo(
        photo=photo,
        caption=(
            "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Abanir\\.Print\\!*\n\n"
            "–Ø ‚Äî –≤–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è ‚ú® *–ø–µ—á–∞—Ç–∏* –∏ *—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è* –ø—Ä—è–º–æ –≤ Telegram\\.\n\n"
            "üìÑ –ß—Ç–æ —è —É–º–µ—é:\n"
            "‚Ä¢ *–ü–µ—á–∞—Ç–∞—Ç—å* PDF\\-–¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
            "‚Ä¢ *–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å* –±—É–º–∞–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏—Ö –≤–∞–º\n"
            "‚Ä¢ *–†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å* –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –°–ë–ü\n\n"
            "_–ë—ã—Å—Ç—Ä–æ\\. –£–¥–æ–±–Ω–æ\\. –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ\\._"
        ),
        parse_mode=ParseMode.MARKDOWN_V2
    )

    msg2 = await message.answer(
        "üëá *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:*",
        reply_markup=get_main_reply_keyboard(message.from_user.id),
        parse_mode=ParseMode.MARKDOWN_V2
    )

    welcome_message_id[message.from_user.id] = {
        "menu_msg_id": msg2.message_id,
        "user_msg_id": message.message_id
    }

from aiogram.types import FSInputFile

@router.message(F.text == "üí∞ –ü—Ä–∞–π—Å")
async def show_price(message: Message):
    from handlers.user_main import _remove_last_menu, welcome_message_id

    # üßπ –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    try:
        msg_id = welcome_message_id.get(message.from_user.id)
        if msg_id:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
    except:
        pass

    await _remove_last_menu(message)
    await _remove_last_menu(message)
    # –ú–∞—Å–∫–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.edit_text("‚Äé")  # –ù–µ–≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª
    except:
        try:
            await message.delete()
        except:
            pass

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    welcome_message_id[message.from_user.id] = {
        "menu_msg_id": None,
        "user_msg_id": message.message_id  # üëà —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü—Ä–∞–π—Å"
    }

    image = FSInputFile(r"C:\Program Files\JetBrains\AbanirPrint\images\PriceList.png")

    sent_msg = await message.answer_photo(
        photo=image,
        caption=(
            "<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥:</b>\n\n"
            "üñ® <b>–ü–µ—á–∞—Ç—å</b> —á/–±, –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è ‚Äî <b>5 ‚ÇΩ</b>/—Å—Ç—Ä.\n"
            "üì∑ <b>–°–∫–∞–Ω</b> –≤ Telegram ‚Äî <b>10 ‚ÇΩ</b>/—Å—Ç—Ä.\n"
            "üñ® <b>–°–∫–∞–Ω + –ø–µ—á–∞—Ç—å</b> ‚Äî <b>15 ‚ÇΩ</b>/—Å—Ç—Ä."
        ),
        reply_markup=back_to_menu_button,
        parse_mode="HTML"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    welcome_message_id[message.from_user.id]["menu_msg_id"] = sent_msg.message_id

from aiogram.enums import ParseMode

@router.message(F.text == "üñ®Ô∏è –ü–µ—á–∞—Ç—å")
async def ask_file(message: Message):
    from handlers.user_main import _remove_last_menu, welcome_message_id

    # üßπ –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    try:
        msg_id = welcome_message_id.get(message.from_user.id)
        if msg_id:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
    except:
        pass

    await _remove_last_menu(message)
    await _remove_last_menu(message)
    # –ú–∞—Å–∫–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.edit_text("‚Äé")
    except:
        try:
            await message.delete()
        except:
            pass

    await _remove_last_menu(message)

    photo = FSInputFile(r"C:\Program Files\JetBrains\AbanirPrint\images\SendFileImage.png")

    sent = await message.bot.send_photo(
        chat_id=message.chat.id,
        photo=photo,
        caption=(
            "<b>üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø–µ—á–∞—Ç–∏:</b>\n\n"
            "‚Ä¢ <b>PDF</b> –¥–æ <u><i>20–ú–ë</i></u>\n"
            "‚Ä¢ <b>–§–æ—Ç–æ</b> –¥–æ <u><i>10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</i></u> –∑–∞ —Ä–∞–∑\n\n"
            "<i>–î—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è</i>"
        ),
        reply_markup=back_to_menu_button,
        parse_mode=ParseMode.HTML
    )

    if not welcome_message_id.get(message.from_user.id):
        welcome_message_id[message.from_user.id] = {}

    welcome_message_id[message.from_user.id]["menu_msg_id"] = sent.message_id

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

@router.message(F.document)
async def handle_file(message: Message, state: FSMContext):
    file: Document = message.document
    file_ext = os.path.splitext(file.file_name)[1].lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    if file_ext != ".pdf":
        image = FSInputFile(r"C:\Program Files\JetBrains\AbanirPrint\images\UnsupportedErrorImage.png")  # —É–∫–∞–∂–∏ –ø—É—Ç—å –∫ —Å–≤–æ–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ
        await message.answer_photo(
            photo=image,
            caption=(
                "‚ùå <b>–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è</b>\n\n"
                "üìé –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ\n"
                " <b>PDF</b> (–¥–æ 20–ú–ë)\n\n"
                "<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º</i>"
            ),
            parse_mode=ParseMode.HTML
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ PDF
    if file.file_size > MAX_PDF_MB * 1024 * 1024:
        image = FSInputFile("C:\Program Files\JetBrains\AbanirPrint\images\SizeErrorImage.png")  # —É–∫–∞–∂–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await message.answer_photo(
            photo=image,
            caption=f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.\n\nüìÑ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä PDF:\n<b>{MAX_PDF_MB} –ú–ë</b>\n\n<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å —Ñ–∞–π–ª–æ–º PDF –¥–æ 20–ú–±</i>",
            parse_mode=ParseMode.HTML
        )
        return

    # –í—Å—ë –æ–∫ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    file_path = os.path.join(UPLOAD_DIR, file.file_name)
    await message.bot.download(file, destination=file_path)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    ext = os.path.splitext(file_path)[1].lower()
    if ext == ".pdf":
        total_pages = count_pdf_pages(file_path)
    else:
        total_pages = count_image_pages(file_path)

    copies = 1  # –ø–æ–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    cost_per_page = 5

    await state.update_data(
        file=file_path,
        pages=total_pages,
        copies=copies,
        cost=total_pages * copies * cost_per_page
    )
    user_print_queue[message.from_user.id] = {
        "file": file_path,
        "pages": total_pages,
        "copies": copies,
        "cost": total_pages * copies * cost_per_page
    }

    msg_data = welcome_message_id.get(message.from_user.id)
    if msg_data:
        try:
            if isinstance(msg_data, dict) and msg_data.get("menu_msg_id"):
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_data["menu_msg_id"])
        except Exception as e:
            print("[handle_file] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π:", e)

    await send_print_parameters(message, state)

    welcome_message_id.setdefault(message.from_user.id, {})["user_file_msg_id"] = message.message_id

@router.callback_query(F.data == "change_copies")
async def prompt_copy_input(callback: CallbackQuery, state: FSMContext):
    await state.set_state(PrintStates.await_copies)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π message_id —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    await state.update_data(last_message_id=callback.message.message_id)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º "–≤–≤–µ–¥–∏—Ç–µ –∫–æ–ø–∏–∏" –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    msg = await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π (–æ—Ç 1 –¥–æ 20):")
    await state.update_data(prompt_msg_id=msg.message_id)


@router.message(PrintStates.await_copies)
async def receive_copy_input(message: Message, state: FSMContext):
    data = await state.get_data()
    user_input = message.text.strip()
    edit_mode = data.get("edit_mode", "copies")

    info = user_print_queue.get(message.from_user.id)
    if not info:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    if edit_mode == "pages":
        info["page_range"] = user_input
    elif edit_mode == "pages_per_sheet":
        if user_input not in ["1", "2", "4"]:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ 1, 2 –∏–ª–∏ 4")
            return

        pages_per_sheet = int(user_input)
        info["pages_per_sheet"] = pages_per_sheet

        # –ü–µ—Ä–µ—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        # –ü–µ—Ä–µ—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        total_pages = info.get("pages", 1)
        page_range_str = info.get("page_range", "")
        pages_per_sheet = info.get("pages_per_sheet", 1)
        copies = info.get("copies", 1)

        selected_pages = parse_page_range(page_range_str, total_pages) if page_range_str else list(
            range(1, total_pages + 1))
        sheets = ceil(len(selected_pages) / pages_per_sheet)
        info["cost"] = sheets * copies * 5

        user_print_queue[message.from_user.id] = info
    else:
        if not user_input.isdigit() or not (1 <= int(user_input) <= 20):
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 20.")
            return
        info["copies"] = int(user_input)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –ª–∏—Å—Ç–µ
    page_range_str = info.get("page_range", "")
    total_pages = info.get("pages", 1)
    pages_per_sheet = info.get("pages_per_sheet", 1)

    selected_pages = parse_page_range(page_range_str, total_pages) if page_range_str else list(
        range(1, total_pages + 1))
    sheets = ceil(len(selected_pages) / pages_per_sheet)
    info["cost"] = sheets * info.get("copies", 1) * 5
    user_print_queue[message.from_user.id] = info

    try:
        await message.delete()
    except:
        pass

    if "prompt_msg_id" in data:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=data["prompt_msg_id"])
        except:
            pass

    if "last_message_id" in data:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=data["last_message_id"])
        except:
            pass

    photo = FSInputFile(r"C:\Program Files\JetBrains\AbanirPrint\images\PrintParamsImage.png")
    caption = (
        "<b>üìÑ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—á–∞—Ç–∏:</b>\n\n"
        "‚Ä¢ <b>–ß—ë—Ä–Ω–æ-–±–µ–ª–∞—è</b>\n"
        "‚Ä¢ <b>–û–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è</b>\n"
        f"‚Ä¢ <b>–ö–æ–ª-–≤–æ –∫–æ–ø–∏–π:</b> <u>{info.get('copies', 1)}</u>\n"
        f"‚Ä¢ <b>–°—Ç—Ä–∞–Ω–∏—Ü—ã:</b> <u>{info.get('page_range', '–≤—Å–µ')}</u>\n"
        f"‚Ä¢ <b>–°—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –ª–∏—Å—Ç–µ:</b> <u>{info.get('pages_per_sheet', 1)}</u>\n\n"
        f"<b>üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <i>{info['cost']} ‚ÇΩ</i>"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É –∏ –æ–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay_and_print")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ –∫–æ–ø–∏–π", callback_data="change_copies")],
        [InlineKeyboardButton(text="üìë –í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã", callback_data="change_pages")],
        [InlineKeyboardButton(text="üóÉ –ù–∞ –ª–∏—Å—Ç–µ: 1 / 2 / 4", callback_data="change_pages_per_sheet")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    # üßπ –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    state_data = await state.get_data()
    last_msg_id = state_data.get("last_message_id")
    if last_msg_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=last_msg_id)
        except Exception as e:
            print("[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:", e)

    # üßπ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    state_data = await state.get_data()
    last_msg_id = state_data.get("last_message_id")
    if last_msg_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=last_msg_id)
        except Exception as e:
            print("[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:", e)

    sent = await message.answer_photo(photo=photo, caption=caption, parse_mode=ParseMode.HTML, reply_markup=keyboard)
    await state.clear()
    await state.update_data(last_message_id=sent.message_id)

from aiogram.types import FSInputFile

@router.callback_query(F.data == "change_pages_per_sheet")
async def ask_pages_per_sheet(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1 –Ω–∞ –ª–∏—Å—Ç–µ", callback_data="sheet_1")],
        [InlineKeyboardButton(text="2 –Ω–∞ –ª–∏—Å—Ç–µ", callback_data="sheet_2")],
        [InlineKeyboardButton(text="4 –Ω–∞ –ª–∏—Å—Ç–µ", callback_data="sheet_4")],
    ])
    try:
        await callback.message.delete()
    except:
        pass

    await callback.message.answer("üóÉ –í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–µ—á–∞—Ç–∞—Ç—å –Ω–∞ –æ–¥–Ω–æ–º –ª–∏—Å—Ç–µ:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("sheet_"))
async def set_pages_per_sheet(callback: CallbackQuery, state: FSMContext):
    value = int(callback.data.split("_")[1])
    info = user_print_queue.get(callback.from_user.id)
    if not info:
        await callback.message.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # üßπ –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "1 –Ω–∞ –ª–∏—Å—Ç–µ / 2 –Ω–∞ –ª–∏—Å—Ç–µ / 4 –Ω–∞ –ª–∏—Å—Ç–µ"
    try:
        await callback.message.delete()
    except:
        pass

    info["pages_per_sheet"] = value
    await send_print_parameters(callback, state)

class PageSelection(StatesGroup):
    mode = State()
    pages_selected = State()

@router.callback_query(F.data == "change_pages")
async def start_page_toggle(callback: CallbackQuery, state: FSMContext):
    info = user_print_queue.get(callback.from_user.id)
    if not info:
        await callback.message.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    total = info.get("pages", 1)
    selected = set(range(1, total + 1))  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å—ë –≤—ã–±—Ä–∞–Ω–æ

    await state.set_state(PageSelection.pages_selected)
    await state.update_data(selected=selected, total=total)
    await render_page_toggle(callback.message, selected, total)


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
async def render_page_toggle(message: Message, selected: set[int], total: int):
    lines = [f"{i} {'‚úÖ' if i in selected else '‚ùå'}" for i in range(1, total + 1)]
    text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–µ—á–∞—Ç–∏:</b>\n\n" + "\n".join(lines)

    # –ö–Ω–æ–ø–∫–∏: –ø–æ 5 —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ —Å—Ç—Ä–æ–∫—É
    buttons = []
    for i in range(1, total + 1, 5):
        row = [InlineKeyboardButton(text=f"{j}", callback_data=f"toggle_page_{j}") for j in range(i, min(i+5, total+1))]
        buttons.append(row)
    buttons.append([InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="pages_done")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
@router.callback_query(F.data.startswith("toggle_page_"))
async def toggle_page(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = data.get("selected", set())
    total = data.get("total", 1)
    page = int(callback.data.split("_")[-1])

    if page in selected:
        selected.remove(page)
    else:
        selected.add(page)

    await state.update_data(selected=selected)

    try:
        await callback.message.delete()
    except:
        pass

    await render_page_toggle(callback.message, selected, total)


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
@router.callback_query(F.data == "pages_done")
async def finalize_page_selection(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = sorted(data.get("selected", set()))
    user_id = callback.from_user.id

    info = user_print_queue.get(user_id)
    if not info:
        await callback.message.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    def format_range(pages: list[int]) -> str:
        if not pages:
            return ""
        ranges = []
        start = prev = pages[0]
        for p in pages[1:]:
            if p == prev + 1:
                prev = p
            else:
                if start == prev:
                    ranges.append(str(start))
                else:
                    ranges.append(f"{start}-{prev}")
                start = prev = p
        if start == prev:
            ranges.append(str(start))
        else:
            ranges.append(f"{start}-{prev}")
        return ",".join(ranges)

    info["page_range"] = format_range(selected)
    user_print_queue[user_id] = info

    try:
        await callback.message.delete()
    except:
        pass

    await send_print_parameters(callback, state)
    await state.clear()


@router.callback_query(F.data.startswith("range_"))
async def set_page_range(callback: CallbackQuery, state: FSMContext):
    data = callback.data

    info = user_print_queue.get(callback.from_user.id)
    if not info:
        await callback.message.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if data == "range_all":
        info["page_range"] = ""
    elif data == "range_custom":
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
        await state.set_state(PrintStates.await_copies)
        await state.update_data(edit_mode="pages", last_message_id=callback.message.message_id)
        msg = await callback.message.answer("‚úç –í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1-3,5,7):")
        await state.update_data(prompt_msg_id=msg.message_id)
        return
    else:
        # range_2_5
        _, start, end = data.split("_")
        info["page_range"] = f"{start}-{end}"

    await send_print_parameters(callback, state)

from aiogram.types import Message, CallbackQuery

async def send_print_parameters(message_or_callback, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç message –∏–∑ message –∏–ª–∏ callback
    if isinstance(message_or_callback, CallbackQuery):
        message = message_or_callback.message
        user_id = message_or_callback.from_user.id
    elif isinstance(message_or_callback, Message):
        message = message_or_callback
        user_id = message.from_user.id
    else:
        raise ValueError("Unknown type passed to send_print_parameters")

    info = user_print_queue.get(user_id)
    if not info:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    copies = info.get("copies", 1)
    pages = info.get("pages", 1)
    page_range_str = info.get("page_range", "")
    pages_per_sheet = info.get("pages_per_sheet", 1)

    pages_to_print = parse_page_range(page_range_str, pages) if page_range_str else pages
    sheets = ceil(pages_to_print / pages_per_sheet)
    info["cost"] = sheets * copies * 5

    photo = FSInputFile(r"C:\Program Files\JetBrains\AbanirPrint\images\PrintParamsImage.png")
    caption = (
        "<b>üìÑ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—á–∞—Ç–∏:</b>\n\n"
        "‚Ä¢ <b>–ß—ë—Ä–Ω–æ-–±–µ–ª–∞—è</b>\n"
        "‚Ä¢ <b>–û–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è</b>\n"
        f"‚Ä¢ <b>–ö–æ–ª-–≤–æ –∫–æ–ø–∏–π:</b> <u>{copies}</u>\n"
        f"‚Ä¢ <b>–°—Ç—Ä–∞–Ω–∏—Ü—ã:</b> <u>{info.get('page_range', '–≤—Å–µ')}</u>\n"
        f"‚Ä¢ <b>–°—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –ª–∏—Å—Ç–µ:</b> <u>{info.get('pages_per_sheet', 1)}</u>\n\n"
        f"<b>üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <i>{info['cost']} ‚ÇΩ</i>"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É –∏ –æ–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay_and_print")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ –∫–æ–ø–∏–π", callback_data="change_copies")],
        [InlineKeyboardButton(text="üìë –í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã", callback_data="change_pages")],
        [InlineKeyboardButton(
            text=f"üóÉ –ù–∞ –ª–∏—Å—Ç–µ: {pages_per_sheet} —Å—Ç—Ä",
            callback_data="change_pages_per_sheet"
        )],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    # üßπ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    state_data = await state.get_data()
    last_msg_id = state_data.get("last_message_id")
    if last_msg_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=last_msg_id)
        except Exception as e:
            print("[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:", e)

    sent = await message.answer_photo(photo=photo, caption=caption, parse_mode=ParseMode.HTML, reply_markup=keyboard)
    await state.update_data(last_message_id=sent.message_id)

from services.yookassa_pay import create_payment, check_payment




@router.callback_query(F.data == "pay_and_print")
async def start_payment(callback: CallbackQuery):
    info = user_print_queue.get(callback.from_user.id)
    if not info:
        await callback.message.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    total_pages = info.get("pages", 1)
    copies = info.get("copies", 1)
    page_range_str = info.get("page_range", "")
    pages_per_sheet = info.get("pages_per_sheet", 1)

    pages_to_print = parse_page_range(page_range_str, total_pages) if page_range_str else total_pages
    sheets = ceil(pages_to_print / pages_per_sheet)
    cost = sheets * copies * 5
    info["cost"] = cost

    payment = create_payment(cost, callback.from_user.id)
    info["payment_id"] = payment["id"]

    text = (
        f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost} ‚ÇΩ\n"
        f"({pages_to_print} —Å—Ç—Ä. √∑ {pages_per_sheet} –Ω–∞ –ª–∏—Å—Ç–µ = {sheets} –ª–∏—Å—Ç–æ–≤ √ó {copies} –∫–æ–ø. √ó 5‚ÇΩ)"
        "\n\nüîó –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ –°–ë–ü"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –°–ë–ü", url=payment["url"])],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

    try:
        await callback.message.delete()
    except:
        pass

    await callback.message.answer(text, reply_markup=keyboard)

@router.callback_query(F.data == "check_payment")
async def check_payment_status(callback: CallbackQuery):
    info = user_print_queue.get(callback.from_user.id)
    if not info or "payment_id" not in info:
        await callback.message.answer("‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    status = check_payment(info["payment_id"])
    print(f"[DEBUG] Payment status for {info['payment_id']}: {status}")

    if status == "succeeded":
        try:
            await callback.message.delete()
        except:
            pass

        await simulate_print_progress(callback.message, info["file"], info["copies"], info=info)
    else:
        await callback.answer("‚è≥ –û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.callback_query(F.data == "start_print")
async def start_actual_print(callback: CallbackQuery):
    info = user_print_queue.get(callback.from_user.id)
    if not info:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    try:
        await callback.message.delete()
    except:
        pass

    # –ê–Ω–∏–º–∞—Ü–∏—è + –ø–µ—á–∞—Ç—å
    await simulate_print_progress(callback.message, info["file"], info["copies"], info=info)

from collections import defaultdict
from aiogram.utils.markdown import hbold, hitalic

from PIL import Image

def estimate_pages_for_image(path: str) -> int:
    with Image.open(path) as img:
        width, height = img.size
        aspect_ratio = width / height

        # –û—Ü–µ–Ω–∏–≤–∞–µ–º, –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ª–∏ –Ω–∞ –æ–¥–∏–Ω –ª–∏—Å—Ç (A4 ~ 1.41)
        return 1 if 0.6 < aspect_ratio < 1.7 else 2  # –ø—Ä–∏–º–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞

@router.callback_query(F.data.startswith("copies_"))
async def calc_price(callback):
    copies = int(callback.data.split("_")[1])
    total_pages = 3  # —ç–º—É–ª—è—Ü–∏—è
    cost = calculate_price(total_pages, copies)
    await callback.message.answer(f"üí∏ –í—Å–µ–≥–æ: {total_pages} —Å—Ç—Ä. √ó {copies} –∫–æ–ø. = {cost} ‚ÇΩ\n\n–û–ø–ª–∞—Ç–∞ –∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ\n\nüñ® –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–µ—á–∞—Ç—å.")
    await callback.answer()

async def _remove_last_menu(message: Message):
    data = welcome_message_id.get(message.from_user.id)
    if not data:
        return

    bot = message.bot
    try:
        if isinstance(data, dict):
            if data.get("menu_msg_id"):
                await bot.delete_message(chat_id=message.chat.id, message_id=data["menu_msg_id"])
            if data.get("user_msg_id"):
                await bot.delete_message(chat_id=message.chat.id, message_id=data["user_msg_id"])
        elif isinstance(data, int):  # —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
            await bot.delete_message(chat_id=message.chat.id, message_id=data)
    except Exception as e:
        print("[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:", e)

    welcome_message_id[message.from_user.id] = None

from services.pdf_preprocess import extract_pages, duplicate_pdf, parse_page_range
from services.pdf_preprocess import generate_n_up_pdf
from services.pdf_preprocess import render_pages_to_images, generate_n_up_pdf
from services.pdf_preprocess import extract_pages, render_pages_to_images, generate_n_up_pdf, duplicate_pdf
from services.pdf_preprocess import get_page_numbers_from_range

import win32evtlog

def check_printer_errors_from_event_log(printer_name: str, minutes_back: int = 2) -> str | None:
    server = 'localhost'
    logtype = 'System'
    hand = win32evtlog.OpenEventLog(server, logtype)

    import datetime
    import time
    now = datetime.datetime.now()
    flags = win32evtlog.EVENTLOG_BACKWARDS_READ | win32evtlog.EVENTLOG_SEQUENTIAL_READ
    events = win32evtlog.ReadEventLog(hand, flags, 0)

    if not events:
        return None

    for ev_obj in events:
        if ev_obj.TimeGenerated < now - datetime.timedelta(minutes=minutes_back):
            break  # —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ

        if ev_obj.EventID in [13, 6161, 6163, 6170] and printer_name in ev_obj.StringInserts[0]:
            msg = " ".join(ev_obj.StringInserts)
            if "–±—É–º–∞–≥–∞" in msg.lower() or "paper" in msg.lower():
                return f"üßæ {msg}"

    return None

import cv2
import os
import time
import cv2

import subprocess
import time

import subprocess
import os
import signal
import time

def record_video_during_print_safe(output_path: str, final_pdf: str) -> bool:
    ffmpeg_path = r"C:\Program Files\JetBrains\AbanirPrint\ffmpeg.exe"
    output_path = os.path.abspath(output_path)

    command = [
        ffmpeg_path,
        "-f", "dshow",
        "-i", "video=Webcam C170",
        "-vcodec", "libx264",
        "-preset", "ultrafast",
        "-crf", "25",
        "-y", output_path
    ]

    print(f"[ffmpeg] ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º ffmpeg –≤ {output_path}")
    try:
        # 1. –°—Ç–∞—Ä—Ç—É–µ–º –∑–∞–ø–∏—Å—å ffmpeg —á–µ—Ä–µ–∑ shell, —á—Ç–æ–±—ã –æ–Ω –ø–æ–ª—É—á–∏–ª CTRL+C –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        process = subprocess.Popen(command, creationflags=subprocess.CREATE_NEW_PROCESS_GROUP)

        # 2. –î–ê–Å–ú –í–†–ï–ú–Ø –∫–∞–º–µ—Ä–µ
        print("[ffmpeg] ‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∫–∞–º–µ—Ä–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞–µ—Ç—Å—è...")
        time.sleep(2)

        # 3. –ü–µ—á–∞—Ç–∞–µ–º
        print("[ffmpeg] ‚úÖ –ö–∞–º–µ—Ä–∞ –≥–æ—Ç–æ–≤–∞. –ü–µ—á–∞—Ç—å –ø–æ—à–ª–∞...")
        print_and_wait(final_pdf)

        # 4. –ó–∞–≤–µ—Ä—à–∞–µ–º ffmpeg –∫—Ä–∞—Å–∏–≤–æ ‚Äî –ø–æ—Å—ã–ª–∞–µ–º CTRL+C
        print("[ffmpeg] üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏...")
        process.send_signal(signal.CTRL_BREAK_EVENT)  # Windows: –ø–æ—Å—ã–ª–∞–µ–º Ctrl+Break
        process.wait(timeout=10)

        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
        exists = os.path.exists(output_path)
        size_ok = os.path.getsize(output_path) > 1000 if exists else False

        return exists and size_ok

    except Exception as e:
        print(f"[ffmpeg] ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


async def simulate_print_progress(message: Message, original_path: str, copies: int = 1, info=None):
    user_id = message.chat.id if hasattr(message, "chat") else message.from_user.id
    info = user_print_queue.get(user_id)

    if not info:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    page_range_str = info.get("page_range", "")
    total_pages = info.get("pages", 1)
    pages_per_sheet = info.get("pages_per_sheet", 1)

    selected_pages = get_page_numbers_from_range(page_range_str, total_pages) if page_range_str else list(range(1, total_pages + 1))
    if isinstance(selected_pages, int):  # –∑–∞—â–∏—Ç–∞
        selected_pages = [selected_pages]

    print(f"[DEBUG] selected_pages = {selected_pages}, type = {type(selected_pages)}")

    # ‚¨áÔ∏è –í–´–†–ï–ó–ê–ï–ú –¢–û–õ–¨–ö–û –ù–£–ñ–ù–´–ï –°–¢–†–ê–ù–ò–¶–´
    trimmed_pdf = extract_pages(original_path, selected_pages)

    # ‚¨áÔ∏è –ü–†–ï–û–ë–†–ê–ó–£–ï–ú –í –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
    new_total = count_pdf_pages(trimmed_pdf)
    images = render_pages_to_images(trimmed_pdf, list(range(1, new_total + 1)))

    # ‚¨áÔ∏è –§–û–†–ú–ò–†–£–ï–ú N-UP PDF
    n_up_pdf = generate_n_up_pdf(images, pages_per_sheet)

    # ‚¨áÔ∏è –î–£–ë–õ–ò–†–£–ï–ú –ù–ê –ö–û–ü–ò–ò
    final_pdf = duplicate_pdf(n_up_pdf, copies)

    print("[DEBUG] –ü—É—Ç—å –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É PDF:", final_pdf)
    os.system(f'start {final_pdf}')  # –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä

    # ‚¨áÔ∏è –ê–ù–ò–ú–ê–¶–ò–Ø –ü–û–î–ì–û–¢–û–í–ö–ò
    progress_msg = await message.answer("üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–µ—á–∞—Ç–∏...")
    for i in range(0, 101, 20):
        bar = "üü©" * (i // 20) + "‚¨ú" * (5 - (i // 20))
        try:
            await progress_msg.edit_text(f"üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–µ—á–∞—Ç–∏...\n{i}%\n{bar}")
        except:
            pass
        await asyncio.sleep(0.6)

    # await check_and_notify_printer_errors(
    #     bot=message.bot,
    #     user_id=message.from_user.id,
    #     action="–ø–µ—á–∞—Ç—å",
    #     details={
    #         "file": original_path,
    #         "copies": copies
    #     }
    # )

    from aiogram.types import FSInputFile

    # üé• –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∏–¥–µ–æ (10 —Å–µ–∫)
    import cv2

    import cv2

    # üé• –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∏–¥–µ–æ (10 —Å–µ–∫)
    video_path = f"print_videos/print_demo_{message.from_user.id}.mp4"
    recorded = await asyncio.to_thread(record_video_during_print_safe, video_path, final_pdf)

    if recorded:
        video_file = FSInputFile(video_path)
        await message.answer_video(
            video=video_file,
            caption="üé• –≠—Ç–æ –ø—Ä–∏–º–µ—Ä, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –ø–µ—á–∞—Ç—å.\nMVP-–≤–µ—Ä—Å–∏—è –≤ –¥–µ–π—Å—Ç–≤–∏–∏!"
        )
    else:
        await message.answer("‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å. –ö–∞–º–µ—Ä–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.")

    # ‚¨áÔ∏è –ü–ï–ß–ê–¢–¨


    try:
        await progress_msg.delete()
    except:
        pass

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–∞–π–ª–æ–º
    msg_data = welcome_message_id.get(user_id)
    if msg_data and isinstance(msg_data, dict):
        file_msg_id = msg_data.get("user_file_msg_id")
        if file_msg_id:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=file_msg_id)
            except Exception as e:
                print("[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º –ø–æ—Å–ª–µ –ø–µ—á–∞—Ç–∏:", e)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–µ—á–∞—Ç–∏
    await message.answer("üñ® –ü–µ—á–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–±–µ—Ä–∏—Ç–µ –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç!")

    from services.history_logger import safe_save_action

    # ...
    safe_save_action(
        user_id=user_id,
        action="print",
        details={
            "pages": len(selected_pages),
            "copies": copies,
            "pages_per_sheet": pages_per_sheet,
            "page_range": info.get("page_range", "–≤—Å–µ"),
            "cost": info["cost"],
            "error": None
        }
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    msg = await message.answer("üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                               reply_markup=get_main_reply_keyboard(user_id))
    welcome_message_id[user_id] = {
        "menu_msg_id": msg.message_id
    }


from PyPDF2 import PdfReader

def count_pdf_pages(path: str) -> int:
    try:
        reader = PdfReader(path)
        return len(reader.pages)
    except:
        return 1  # fallback

from aiogram.utils.media_group import MediaGroupBuilder

import re
from math import ceil

def parse_page_range(page_range_str: str, total_pages: int) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: "1-3,5,7"
    """
    pages = set()
    for part in page_range_str.split(","):
        part = part.strip()
        if "-" in part:
            start, end = part.split("-")
            if start.isdigit() and end.isdigit():
                pages.update(range(int(start), int(end)+1))
        elif part.isdigit():
            pages.add(int(part))

    # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
    pages = {p for p in pages if 1 <= p <= total_pages}
    return len(pages) if pages else total_pages

